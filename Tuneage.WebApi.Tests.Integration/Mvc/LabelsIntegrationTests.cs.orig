<<<<<<< HEAD
﻿using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
=======
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
using Tuneage.Data.TestData;
using Xunit;

namespace Tuneage.WebApi.Tests.Integration.Mvc
{
<<<<<<< HEAD
    public class LabelsIntegrationTests : IntegrationTestFixture
    {
        [Fact]
        public async Task AllGet_ShouldReturnViewWithLabelsData()
=======
    public class LabelsIntegrationTests : IDisposable
    {
        private readonly TestServer _server;
        private readonly HttpClient _client;

        public LabelsIntegrationTests()
        {
            _server = new TestServer(WebHost.CreateDefaultBuilder().UseStartup<TestStartup>().UseEnvironment("Development"));
            _client = _server.CreateClient();
        }

        [Fact]
        public async void AllGet_ShouldReturnViewWithLabelsData()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels");
=======
            var response = await _client.GetAsync("/labels");
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Contains("<title>Index - Tuneage.WebApi</title>", responseString);
            foreach (var label in TestDataGraph.Labels.LabelsRaw)
            {
                Assert.Contains(label.Name, responseString);
                Assert.Contains(label.WebsiteUrl, responseString);
            }
        }

        [Fact]
<<<<<<< HEAD
        public async Task DetailsGet_ShouldReturnViewWithExistingLabelData()
=======
        public async void DetailsGet_ShouldReturnViewWithExistingLabelData()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels/details/" + TestDataGraph.Labels.LabelExisting.LabelId);
=======
            var response = await _client.GetAsync("/labels/details/" + TestDataGraph.Labels.LabelExisting.LabelId);
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Contains("<title>Details - Tuneage.WebApi</title>", responseString);
            Assert.Contains(TestDataGraph.Labels.LabelExisting.Name, responseString);
            Assert.Contains(TestDataGraph.Labels.LabelExisting.WebsiteUrl, responseString);
        }

        [Fact]
<<<<<<< HEAD
        public async Task DetailsGet_ShouldReturnNotFoundResultWhenCalledWithBadId()
=======
        public async void DetailsGet_ShouldReturnNotFoundResultWhenCalledWithBadData()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels/details/" + TestDataGraph.Labels.LabelIdNonExistent);
=======
            var response = await _client.GetAsync("/labels/details/" + TestDataGraph.Labels.LabelIdNonExistent);
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal(string.Empty, responseString);
        }

        [Fact]
<<<<<<< HEAD
        public async Task CreateGet_ShouldReturnViewForCreatingNewLabel()
=======
        public async void CreateGet_ShouldReturnViewForCreatingNewLabel()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels/create");
=======
            var response = await _client.GetAsync("/labels/create");
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            response.EnsureSuccessStatusCode();
<<<<<<< HEAD
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.Contains("<title>Create - Tuneage.WebApi</title>", responseString);
        }
        
        [Fact]
        public async Task CreatePost_ShouldReturnFoundStatusAndRedirectionLocationToAll()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
            {
                { "LabelId" , (TestDataGraph.Labels.LabelsRaw.Count + 1).ToString() },
                { "Name", TestDataGraph.Labels.LabelNew.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelNew.WebsiteUrl }
            });

            // Act
            var response = await Client.PostAsync("/labels/create", new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.Found, response.StatusCode);
            Assert.Equal("/labels", response.Headers.Location.ToString());
            Assert.Equal(string.Empty, responseString);
        }

        [Fact]
        public async Task CreatePost_ShouldReturnErrorWhenCalledWithExistingId()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
            {
                { "LabelId" , TestDataGraph.Labels.LabelExisting.LabelId.ToString() },
                { "Name", TestDataGraph.Labels.LabelExisting.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelExisting.WebsiteUrl }
            });

            // Act
            var response = await Client.PostAsync("/labels/create", new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.InternalServerError, response.StatusCode);
            Assert.Contains("ArgumentException: An item with the same key has already been added.", responseString);
        }

        [Fact]
        public async Task EditGet_ShouldReturnViewWithExistingLabelData()
=======
            Assert.Contains("<title>Create - Tuneage.WebApi</title>", responseString);
        }

        [Fact(Skip = "This POST attempt returns a Bad Request. Need to figure out right way to do this.")]
        public async void CreatePost_ShouldReturnViewWithNewlyCreatedLabelData()
        {
            // Arrange
            var formData = new Dictionary<string, string>
            {
                { "Name", TestDataGraph.Labels.LabelNew.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelNew.WebsiteUrl }
            };

            // Act
            var response = await _client.PostAsync("/labels/create", new FormUrlEncodedContent(formData));

            // Assert
            Assert.Equal(HttpStatusCode.Found, response.StatusCode);
            Assert.Equal("/Labels", response.Headers.Location.ToString());
        }

        [Fact]
        public async void EditGet_ShouldReturnViewWithExistingLabelData()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels/edit/" + TestDataGraph.Labels.LabelExisting.LabelId);
=======
            var response = await _client.GetAsync("/labels/edit/" + TestDataGraph.Labels.LabelExisting.LabelId);
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Contains("<title>Edit - Tuneage.WebApi</title>", responseString);
            Assert.Contains(TestDataGraph.Labels.LabelExisting.Name, responseString);
            Assert.Contains(TestDataGraph.Labels.LabelExisting.WebsiteUrl, responseString);
        }

        [Fact]
<<<<<<< HEAD
        public async Task EditGet_ShouldReturnNotFoundResultWhenCalledWithBadId()
=======
        public async void EditGet_ShouldReturnNotFoundResultWhenCalledWithBadData()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels/edit/" + TestDataGraph.Labels.LabelIdNonExistent);
=======
            var response = await _client.GetAsync("/labels/edit/" + TestDataGraph.Labels.LabelIdNonExistent);
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal(string.Empty, responseString);
        }

<<<<<<< HEAD
        [Fact]
        public async Task EditPost_ShouldReturnFoundStatusAndRedirectionLocationToAll()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
=======
        [Fact(Skip = "This POST attempt returns a Bad Request. Need to figure out right way to do this.")]
        public async void EditPost_ShouldReturnViewWithNewlyUpdatedLabelData()
        {
            // Arrange
            var formData = new Dictionary<string, string>
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            {
                { "LabelId", TestDataGraph.Labels.LabelUpdated.LabelId.ToString() },
                { "Name", TestDataGraph.Labels.LabelUpdated.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelUpdated.WebsiteUrl }
<<<<<<< HEAD
            });

            // Act
            var response = await Client.PostAsync("/labels/edit/" + formData["LabelId"], new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();
            
            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.Found, response.StatusCode);
            Assert.Equal("/labels", response.Headers.Location.ToString());
            Assert.Equal(string.Empty, responseString);
        }

        [Fact]
        public async Task EditPost_ShouldReturnErrorWhenCalledWithBadId()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
            {
                { "LabelId", TestDataGraph.Labels.LabelIdNonExistent.ToString() },
                { "Name", TestDataGraph.Labels.LabelUpdated.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelUpdated.WebsiteUrl }
            });

            // Act
            var response = await Client.PostAsync("/labels/edit/" + formData["LabelId"], new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.InternalServerError, response.StatusCode);
            Assert.Contains("DbUpdateConcurrencyException: Attempted to update or delete an entity that does not exist in the store.", responseString);
        }

        [Fact]
        public async Task EditPost_ShouldReturnNotFoundResultWhenCalledWithNonMatchingIdData()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
            {
                { "LabelId", TestDataGraph.Labels.LabelIdNonExistent.ToString() },
                { "Name", TestDataGraph.Labels.LabelUpdated.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelUpdated.WebsiteUrl }
            });

            // Act
            var response = await Client.PostAsync("/labels/edit/" + TestDataGraph.Labels.LabelUpdated.LabelId, new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal(string.Empty, responseString);
        }

        [Fact]
        public async Task DeleteGet_ShouldReturnViewWithExistingLabelData()
=======
            };

            // Act
            var response = await _client.PostAsync("/labels/edit/" + TestDataGraph.Labels.LabelUpdated.LabelId, new FormUrlEncodedContent(formData));

            // Assert
            Assert.Equal(HttpStatusCode.Found, response.StatusCode);
            Assert.Equal("/Labels", response.Headers.Location.ToString());
        }

        [Fact]
        public async void DeleteGet_ShouldReturnViewWithExistingLabelData()
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        {
            // Arrange

            // Act
<<<<<<< HEAD
            var response = await Client.GetAsync("/labels/delete/" + TestDataGraph.Labels.LabelExisting.LabelId);
=======
            var response = await _client.GetAsync("/labels/delete/" + TestDataGraph.Labels.LabelExisting.LabelId);
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Contains("<title>Delete - Tuneage.WebApi</title>", responseString);
            Assert.Contains(TestDataGraph.Labels.LabelExisting.Name, responseString);
            Assert.Contains(TestDataGraph.Labels.LabelExisting.WebsiteUrl, responseString);
        }

<<<<<<< HEAD
        [Fact]
        public async Task DeletePost_ShouldReturnViewWithExistingLabelDataRemoved()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
=======
        [Fact(Skip = "This POST attempt returns a Bad Request. Need to figure out right way to do this.")]
        public async void DeletePost_ShouldReturnViewWithExistingLabelDataRemoved()
        {
            // Arrange
            var formData = new Dictionary<string, string>
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
            {
                { "LabelId", TestDataGraph.Labels.LabelExisting.LabelId.ToString() },
                { "Name", TestDataGraph.Labels.LabelExisting.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelExisting.WebsiteUrl }
<<<<<<< HEAD
            });

            // Act
            var response = await Client.PostAsync("/labels/delete/" + formData["LabelId"], new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.Found, response.StatusCode);
            Assert.Equal("/labels", response.Headers.Location.ToString());
            Assert.Equal(string.Empty, responseString);
        }

        [Fact]
        public async Task DeletePost_ShouldReturnErrorWhenCalledWithBadId()
        {
            // Arrange
            var formData = await EnsureAntiForgeryTokenOnForm(new Dictionary<string, string>()
            {
                { "LabelId", TestDataGraph.Labels.LabelIdNonExistent.ToString() },
                { "Name", TestDataGraph.Labels.LabelExisting.Name },
                { "WebsiteUrl", TestDataGraph.Labels.LabelExisting.WebsiteUrl }
            });

            // Act
            var response = await Client.PostAsync("/labels/delete/" + formData["LabelId"], new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(HttpStatusCode.InternalServerError, response.StatusCode);
            Assert.Contains("NullReferenceException: Object reference not set to an instance of an object.", responseString);
=======
            };

            // Act
            var response = await _client.PostAsync("/labels/delete/" + TestDataGraph.Labels.LabelExisting.LabelId, new FormUrlEncodedContent(formData));
            var responseString = await response.Content.ReadAsStringAsync();

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Contains("<title>Index - Tuneage.WebApi</title>", responseString);
            Assert.DoesNotContain(TestDataGraph.Labels.LabelExisting.Name, responseString);
            Assert.DoesNotContain(TestDataGraph.Labels.LabelExisting.WebsiteUrl, responseString);
        }

        public void Dispose()
        {
            _client.Dispose();
            _server.Dispose();
>>>>>>> 157b09c4b4ad7d81e17d6515bbcc0c8d0278df5b
        }
    }
}
